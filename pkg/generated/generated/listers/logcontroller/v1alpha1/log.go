/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/log-controller/pkg/apis/logcontroller/v1alpha1"
)

// LogLister helps list Logs.
// All objects returned here must be treated as read-only.
type LogLister interface {
	// List lists all Logs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Log, err error)
	// Logs returns an object that can list and get Logs.
	Logs(namespace string) LogNamespaceLister
	LogListerExpansion
}

// logLister implements the LogLister interface.
type logLister struct {
	indexer cache.Indexer
}

// NewLogLister returns a new LogLister.
func NewLogLister(indexer cache.Indexer) LogLister {
	return &logLister{indexer: indexer}
}

// List lists all Logs in the indexer.
func (s *logLister) List(selector labels.Selector) (ret []*v1alpha1.Log, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Log))
	})
	return ret, err
}

// Logs returns an object that can list and get Logs.
func (s *logLister) Logs(namespace string) LogNamespaceLister {
	return logNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogNamespaceLister helps list and get Logs.
// All objects returned here must be treated as read-only.
type LogNamespaceLister interface {
	// List lists all Logs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Log, err error)
	// Get retrieves the Log from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Log, error)
	LogNamespaceListerExpansion
}

// logNamespaceLister implements the LogNamespaceLister
// interface.
type logNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Logs in the indexer for a given namespace.
func (s logNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Log, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Log))
	})
	return ret, err
}

// Get retrieves the Log from the indexer for a given namespace and name.
func (s logNamespaceLister) Get(name string) (*v1alpha1.Log, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("log"), name)
	}
	return obj.(*v1alpha1.Log), nil
}
